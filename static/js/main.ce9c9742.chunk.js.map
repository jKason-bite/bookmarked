{"version":3,"sources":["contexts/ThemeContext.js","reducers/linkReducer.js","contexts/BookmarkContext.js","components/Bookmarks.js","components/Navbar.js","components/ThemeToggle.js","components/BookmarkForm.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toggleTheme","setState","Provider","value","this","props","children","Component","linkReducer","action","type","title","link","id","uuidv4","filter","BookmarkContext","BookmarkContextProvider","useReducer","localData","localStorage","getItem","JSON","parse","links","dispatch","useEffect","setItem","stringify","Bookmarks","useContext","theme","length","className","style","color","background","map","key","href","target","onClick","Navbar","ThemeToggle","BookmarkForm","useState","setTitle","setLink","onSubmit","e","preventDefault","placeholder","onChange","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce9c9742.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n  state = {\r\n    isLightTheme: false,\r\n    light: { syntax: '#00265E', ui: '#95BFFF', bg: '#4388CC' },\r\n    dark: { syntax: '#F1F3F3', ui: '#4388CC', bg: '#434F4E'}\r\n  }\r\n\r\n  toggleTheme = () => {\r\n   this.setState({ isLightTheme: !this.state.isLightTheme });\r\n  }\r\n    render(){\r\n    return (\r\n      <ThemeContext.Provider value= {{...this.state, toggleTheme: this.toggleTheme}}>\r\n        {this.props.children}\r\n      </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n \r\nexport default ThemeContextProvider;","import uuid, { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const linkReducer = (state, action) => {\r\n  switch(action.type) {\r\n      case 'ADD_LINK':\r\n          return  [...state, {\r\n           title: action.link.title,\r\n           link: action.link.link,\r\n           id: uuidv4()\r\n          }]\r\n\r\n       case 'REMOVE_LINK': \r\n           return state.filter(link => link.id !== action.id) \r\n\r\n        default:\r\n            return state   \r\n  }\r\n\r\n} ","import React, {createContext, useReducer, useEffect} from 'react';\r\nimport { linkReducer } from '../reducers/linkReducer';\r\n\r\n\r\nexport const BookmarkContext = createContext();\r\n\r\nconst BookmarkContextProvider = (props) => {\r\n const [links, dispatch] = useReducer(linkReducer, [], () =>{\r\n     const localData = localStorage.getItem('links');\r\n     return localData ? JSON.parse(localData) : [];\r\n })\r\n useEffect(() => {\r\nlocalStorage.setItem('links', JSON.stringify(links))\r\n\r\n }, [links])\r\n\r\n return(\r\n     <BookmarkContext.Provider value ={{links, dispatch}}>\r\n      {props.children}\r\n     </BookmarkContext.Provider> \r\n )\r\n\r\n}\r\n\r\nexport default BookmarkContextProvider;","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { BookmarkContext } from '../contexts/BookmarkContext';\r\n\r\nconst Bookmarks = () => {\r\n\r\n  const {isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const theme = isLightTheme ? light : dark;\r\n  const {links} = useContext(BookmarkContext);\r\n  const {dispatch} = useContext(BookmarkContext);   \r\n\r\n    return links.length? ( \r\n      <div className=\"bookmarks\" style={{ color: theme.syntax, background: theme.bg }}>\r\n        <ul>\r\n          {links.map(link => {\r\n            return(\r\n           <li key={link.id}  style={{ background: theme.ui }}><a href = {link.link} target='_blank'><strong>{link.title}</strong></a>\r\n           <span className=\"remove\" onClick= {() => dispatch({type: 'REMOVE_LINK', id: link.id})}> X </span></li>\r\n            )\r\n          })}\r\n          \r\n        </ul>\r\n      </div>\r\n    ) : \r\n    ( <div className=\"empty\" style={{ color: theme.syntax, background: theme.bg }}>No bookmarks here. <br /> It's time to add something...</div>)\r\n  \r\n}\r\n \r\nexport default Bookmarks;","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { BookmarkContext } from '../contexts/BookmarkContext';\r\n\r\nconst Navbar = () => {\r\n\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n  const { links } = useContext(BookmarkContext);\r\n  const theme = isLightTheme ? light : dark;\r\n\r\n          return (\r\n            <div>\r\n            <nav style={{ background: theme.ui, color: theme.syntax }}>\r\n              <h1>BOOKMARKED</h1>\r\n              <p>Currently you have <strong> {links.length} </strong> bookmarked links. </p>\r\n            </nav>\r\n            </div>\r\n          )\r\n  \r\n}\r\n \r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\n\r\nconst ThemeToggle = () => {\r\n \r\n  const { toggleTheme } = useContext(ThemeContext);\r\n  const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n       \r\n  return(\r\n    <button onClick={toggleTheme}>\r\n      { isLightTheme ? 'Switch to dark theme' :'Switch to light theme'}\r\n      </button>\r\n        );\r\n    \r\n\r\n}\r\n \r\nexport default ThemeToggle;","import React, {useContext, useState} from 'react';\r\nimport { BookmarkContext } from '../contexts/BookmarkContext';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\n\r\nconst BookmarkForm = () =>{\r\n    const {dispatch} = useContext(BookmarkContext);\r\n    const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    const[title, setTitle] = useState('');\r\n    const[link, setLink] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({type:'ADD_LINK', \r\n                  link:{title, link}});\r\n        setTitle('');\r\n        setLink('');\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} > \r\n            <input \r\n            type = \"text\"\r\n            placeholder = \"title\"\r\n            value = {title}\r\n            onChange={(e) => setTitle(e.target.value)} \r\n            style={{ background: theme.ui, color: theme.syntax }}\r\n            required >\r\n            </input>\r\n            <hr />\r\n            <input \r\n            type = \"text\"\r\n            placeholder = \"link\"\r\n            value = {link}\r\n            onChange={(e) => setLink(e.target.value)} \r\n            style={{ background: theme.ui, color: theme.syntax }}\r\n            required >\r\n            </input>\r\n            <input type=\"submit\" value = \"Add bookmark\" style={{ background: theme.ui, color: theme.syntax }} ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default BookmarkForm","import React from 'react';\nimport './App.css';\nimport Bookmarks from './components/Bookmarks';\nimport Navbar from './components/Navbar';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport ThemeToggle from './components/ThemeToggle';\nimport BookmarkContextProvider from './contexts/BookmarkContext';\nimport BookmarkForm from './components/BookmarkForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>     \n      <BookmarkContextProvider>\n        <Navbar /> \n        <Bookmarks /> \n        <BookmarkForm />      \n        </BookmarkContextProvider> \n        <ThemeToggle />       \n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}